An object is a specific instance containing data. It is a value assigned to a variable and contains properties with specific values.
let student = {
  name: 'Tanya',
  email: 'tanya@gmail.com'
};


An interface defines the shape or structure that objects should adhere to. It is a TypeScript
construct used to type-check objects during development, ensuring that they meet certain criteria.
interface Person {
  name: string;
  age: number;
  greet(): void;
}

const person: Person = {
  name: "John",
  age: 30,
  greet() {
    console.log("Hello!");
  }
};



Flexibility, Reusability, and Extensibility:

Interfaces:

Flexibility: Interfaces can define complex structures and can be extended to add additional properties or methods.
Reusability: Once defined, interfaces can be used across multiple variables, functions, and classes.
Extensibility: Interfaces can be extended or merged, making it easy to build upon existing types.

interface Person {
  name: string;
}

interface Student extends Person {
  email: string;
}

let student: Student = {
  name: 'tanya',
  email: 'tanya@gmail.com'
};



Simple, Single-use Scenarios:

Inline Type Annotations (Objects):

Simplicity: Ideal for defining the type of a variable or function parameter inline, especially when the type is used only once or in a very limited scope.
Single-use: Best suited for cases where the type definition is straightforward and does not need to be reused or extended.


let student: {
  name: string;
  email: string;
} = {
  name: 'tanya',
  email: 'tanya@gmail.com'
};

